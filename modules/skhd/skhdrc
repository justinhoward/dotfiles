# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
#

#####################
# Apps
#####################

alt - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

:: app @
alt - space ; app
app < alt - space; default
app < space; default

app < return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~ & skhd --key 'space'
app < w : /Applications/Firefox.app/Contents/MacOS/firefox & skhd --key 'space'
app < m : /Applications/Firefox.app/Contents/MacOS/firefox --new-window https://music.youtube.com & skhd --key 'space'
app < s : /Applications/Slack.app/Contents/MacOS/Slack & skhd --key 'space'
app < a : '/Applications/Authy Desktop.app/Contents/MacOS/Authy Desktop' & skhd --key 'space'

#####################
# Globals
#####################

# Disable cmd-h for hide
cmd - h : true
f15 : osascript ~/.config/skhd/scripts/toggle_input_mute.scpt

#####################
# Yabai
#####################

# Mission control
alt - m : yabai -m space --toggle mission-control
alt + shift - m : yabai -m space --toggle show-desktop

# focus window
alt - h : type="$(yabai -m query --spaces --space | jq -re '.type')"; \
  if [ "$type" = bsp ]; then \
    yabai -m window --focus west; \
  elif [ "$type" = stack ]; then \
    yabai -m window --focus stack.last; \
  else \
    yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh first)"; \
  fi
alt - j : type="$(yabai -m query --spaces --space | jq -re '.type')"; \
  if [ "$type" = bsp ]; then \
    yabai -m window --focus south; \
  elif [ "$type" = stack ]; then \
    yabai -m window --focus stack.next; \
  else \
    yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh)"; \
  fi
alt - k : type="$(yabai -m query --spaces --space | jq -re '.type')"; \
  if [ "$type" = bsp ]; then \
    yabai -m window --focus north; \
  elif [ "$type" = stack ]; then \
    yabai -m window --focus stack.prev; \
  else \
    yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh -1)"; \
  fi
alt - l : type="$(yabai -m query --spaces --space | jq -re '.type')"; \
  if [ "$type" = bsp ]; then \
    yabai -m window --focus east; \
  elif [ "$type" = stack ]; then \
    yabai -m window --focus stack.first; \
  else \
    yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh last)"; \
  fi

alt - p : yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh -1)"
alt - n : yabai -m window --focus "$(~/.config/skhd/scripts/yabai_next.sh)"

# move window
alt + shift - h : type="$(yabai -m query --spaces --space | jq -re '.type')"; \
  if [ "$type" = bsp ]; then \
    yabai -m window --warp west; \
  elif [ "$type" = stack ]; then \
    true; \
  else \
    true; \
  fi
alt + shift - j : yabai -m window --warp south
alt + shift - k : yabai -m window --warp north
alt + shift - l : yabai -m window --warp east

alt + shift - p : yabai -m window --warp "$(~/.config/skhd/scripts/yabai_next.sh -1)"
alt + shift - n : yabai -m window --warp "$(~/.config/skhd/scripts/yabai_next.sh)"

# balance size of windows
alt - 0 : yabai -m space --balance

# create desktop, alt - equals (plus)
alt - 0x18 : yabai -m space --create
# destroy desktop, alt - minus
alt - 0x1B : yabai -m space --destroy

# fast focus desktop
alt - 1 : idx="$(yabai -m query --spaces --display | jq -er '.[0].index')" && yabai -m space --focus "$idx"
alt - 2 : idx="$(yabai -m query --spaces --display | jq -er '.[1].index')" && yabai -m space --focus "$idx"
alt - 3 : idx="$(yabai -m query --spaces --display | jq -er '.[2].index')" && yabai -m space --focus "$idx"
alt - 4 : idx="$(yabai -m query --spaces --display | jq -er '.[3].index')" && yabai -m space --focus "$idx"
alt - 5 : idx="$(yabai -m query --spaces --display | jq -er '.[4].index')" && yabai -m space --focus "$idx"

# send window to desktop
alt + shift - 1 : idx="$(yabai -m query --spaces --display | jq -er '.[0].index')" \
  && yabai -m window --space "$idx"
alt + shift - 2 : idx="$(yabai -m query --spaces --display | jq -er '.[1].index')" \
  && yabai -m window --space "$idx"
alt + shift - 3 : idx="$(yabai -m query --spaces --display | jq -er '.[2].index')" \
  && yabai -m window --space "$idx"
alt + shift - 4 : idx="$(yabai -m query --spaces --display | jq -er '.[3].index')" \
  && yabai -m window --space "$idx"
alt + shift - 5 : idx="$(yabai -m query --spaces --display | jq -er '.[4].index')" \
  && yabai -m window --space "$idx"

# move whole space to another space
alt + shift + ctrl - 1 : idx="$(yabai -m query --spaces --display | jq -er '.[0].index')" \
  && yabai -m space --move "$idx"
alt + shift + ctrl - 2 : idx="$(yabai -m query --spaces --display | jq -er '.[1].index')" \
  && yabai -m space --move "$idx"
alt + shift + ctrl - 3 : idx="$(yabai -m query --spaces --display | jq -er '.[2].index')" \
  && yabai -m space --move "$idx"
alt + shift + ctrl - 4 : idx="$(yabai -m query --spaces --display | jq -er '.[3].index')" \
  && yabai -m space --move "$idx"
alt + shift + ctrl - 5 : idx="$(yabai -m query --spaces --display | jq -er '.[4].index')" \
  && yabai -m space --move "$idx"

# focus display
alt - q : yabai -m display --focus 3
alt - w : yabai -m display --focus 1
alt - e : yabai -m display --focus 2

# send window to display and follow focus
alt + shift - q : yabai -m window --display 3
alt + shift - w : yabai -m window --display 1
alt + shift - e : yabai -m window --display 2

# move current space to display and follow focus
alt + shift + ctrl - w : yabai -m space --display 1
alt + shift + ctrl - e : yabai -m space --display 2
alt + shift + ctrl - q : yabai -m space --display 3

# increase window size
alt - i : if [ "$(yabai -m query --windows --window | jq -re '."is-floating"')" = true ]; then \
    yabai -m window --resize bottom_right:100:100; \
    yabai -m window --resize top_left:-100:-100; \
  else \
    yabai -m window --ratio rel:0.1; \
  fi
alt - o : if [ "$(yabai -m query --windows --window | jq -re '."is-floating"')" = true ]; then \
    yabai -m window --resize bottom_right:-100:-100; \
    yabai -m window --resize top_left:100:100; \
  else \
    yabai -m window --ratio rel:-0.1; \
  fi

# float / unfloat window and center
alt + shift - a : yabai -m window --toggle float;\
  yabai -m window --grid 6:6:1:1:4:4;

# toggle window split type
alt + shift - s : yabai -m window --toggle split

# toggle sticky(+float), topmost, picture-in-picture
alt + shift - d : yabai -m window --toggle sticky;\
  yabai -m window --toggle topmost;\
  yabai -m window --toggle pip

# toggle window zoom (fullscreen)
alt + shift - f : yabai -m window --toggle zoom-fullscreen

# set space layout type
alt - z : yabai -m space --layout bsp; \
  open -gj 'swiftbar://refreshplugin?name=yabai'
alt - x : yabai -m space --layout stack; \
  open -gj 'swiftbar://refreshplugin?name=yabai'
alt - c : yabai -m space --layout float; \
  open -gj 'swiftbar://refreshplugin?name=yabai'

:: yabai_insert @
# alt - ; to enter/exit yabai_insert mode
alt - 0x29 ; yabai_insert
yabai_insert < 0x29 ; default
yabai_insert < alt - 0x29 ; default

yabai_insert < h : yabai -m window --insert west; skhd --key "0x29"
yabai_insert < j : yabai -m window --insert south; skhd --key "0x29"
yabai_insert < k : yabai -m window --insert north; skhd --key "0x29"
yabai_insert < l : yabai -m window --insert east; skhd --key "0x29"
yabai_insert < s : yabai -m window --insert stack; skhd --key "0x29"
