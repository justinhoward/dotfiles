-- local cmp = require('cmp')
--
-- local t = function(str)
--   return vim.api.nvim_replace_termcodes(str, true, true, true)
-- end
--
-- local kind_icons = {
--   Text = "󰉿",
--   Method = "󰆧",
--   Function = "󰊕",
--   Constructor = "",
--   Field = "󰜢",
--   Variable = "󰀫",
--   Class = "󰠱",
--   Interface = "",
--   Module = "",
--   Property = "󰜢",
--   Unit = "󰑭",
--   Value = "󰎠",
--   Enum = "",
--   Keyword = "󰌋",
--   Snippet = "",
--   Color = "󰏘",
--   File = "󰈙",
--   Reference = "󰈇",
--   Folder = "󰉋",
--   EnumMember = "",
--   Constant = "󰏿",
--   Struct = "󰙅",
--   Event = "",
--   Operator = "󰆕",
--   TypeParameter = "",
-- }
--
-- cmp.setup({
--   snippet = {
--     -- REQUIRED - you must specify a snippet engine
--     expand = function(args)
--        require('luasnip').lsp_expand(args.body)
--     end,
--   },
--   mapping = {
--     ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
--     ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
--     ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
--     ['<C-e>'] = cmp.mapping({
--       i = cmp.mapping.abort(),
--       c = cmp.mapping.close(),
--     }),
--     ['<CR>'] = cmp.mapping({
--       -- Accept currently selected item.
--       -- Set `select` to `false` to only confirm explicitly selected items.
--       i = cmp.mapping.confirm({ select = false }),
--       c = function(fallback)
--         if cmp.visible() then
--           if not cmp.confirm({ select = false }) then
--             fallback()
--           end
--         else
--           fallback()
--         end
--       end
--     }),
--     ['<Tab>'] = cmp.mapping({
--       c = function(fallback)
--         if cmp.visible() then
--           cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           fallback()
--         end
--       end
--     }),
--     ['<S-Tab>'] = cmp.mapping({
--       c = function(fallback)
--         if cmp.visible() then
--           cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           fallback()
--         end
--       end
--     }),
--     ['<C-n>'] = cmp.mapping({
--       c = function()
--         if cmp.get_selected_entry() then
--           cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           vim.api.nvim_feedkeys(t('<Down>'), 'n', true)
--         end
--       end,
--       i = function(fallback)
--         if cmp.visible() then
--           cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           fallback()
--         end
--       end
--     }),
--     ['<C-p>'] = cmp.mapping({
--       c = function()
--         if cmp.get_selected_entry() then
--           cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           vim.api.nvim_feedkeys(t('<Up>'), 'n', true)
--         end
--       end,
--       i = function(fallback)
--         if cmp.visible() then
--           cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
--         else
--           fallback()
--         end
--       end
--     }),
--   },
--   sources = cmp.config.sources({
--     { name = 'orgmode' },
--     { name = 'nvim_lsp' },
--     { name = 'luasnip' },
--   }, {
--     { name = 'buffer' },
--   }),
--   window = {
--     completion = cmp.config.window.bordered(),
--     documentation = cmp.config.window.bordered()
--   },
--   formatting = {
--     format = function(entry, vim_item)
--       vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind)
--       return vim_item
--     end
--   }
-- })
--
-- cmp.setup.cmdline(':', {
--   sources = {
--     { name = 'cmdline' },
--     { name = 'buffer' }
--   }
-- })
--
-- cmp.setup.cmdline('/', {
--   sources = {
--     { name = 'buffer' }
--   }
-- })
